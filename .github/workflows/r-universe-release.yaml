name: Manual Package Test and Release

on:
  workflow_dispatch:
    inputs:
      r-version:
        description: 'R version to use'
        required: true
        default: '4.4'

jobs:
  test-and-release:
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: '${{ github.event.inputs.r-version }}', url_template: 'https://bioc.r-universe.dev/bin/windows/contrib/{r_version}/{package_name}_{package_version}.zip'}
          - {os: macos-13, r: '${{ github.event.inputs.r-version }}', url_template: 'https://bioc.r-universe.dev/bin/macosx/big-sur-x86_64/contrib/{r_version}/{package_name}_{package_version}.tgz'}
          - {os: macos-latest, r: '${{ github.event.inputs.r-version }}', url_template: 'https://bioc.r-universe.dev/bin/macosx/big-sur-arm64/contrib/{r_version}/{package_name}_{package_version}.tgz', fallback_url_template: 'https://bioc.r-universe.dev/bin/macosx/big-sur-x86_64/contrib/{r_version}/{package_name}_{package_version}.tgz'}
          - {os: ubuntu-latest, r: '${{ github.event.inputs.r-version }}', container: 'ghcr.io/bioconductor/bioconductor:devel', url_template: 'https://bioc.r-universe.dev/src/contrib/{package_name}_{package_version}.tar.gz'}

    runs-on: ${{ matrix.config.os }}
    container: ${{ matrix.config.container }}

    steps:
    - uses: actions/checkout@v4

    - name: Set package name and version
      id: pkg_info
      run: |
        echo "pkg_name=${{ github.event.repository.name }}" >> $GITHUB_OUTPUT
        echo "pkg_version=$(grep "Version:" DESCRIPTION | awk '{print $2}')" >> $GITHUB_OUTPUT
      shell: bash

    - name: Setup R and Bioconductor
      uses: grimbough/bioc-actions/setup-bioc@v1
      with:
        bioc-version: 3.19

    - uses: r-lib/actions/setup-pandoc@v2
    - uses: r-lib/actions/setup-tinytex@v2

    - name: Generate download URL
      id: get_url
      run: |
        url="${{ matrix.config.url_template }}"
        url="${url/\{r_version\}/${{ matrix.config.r }}}"
        url="${url/\{package_name\}/${{ steps.pkg_info.outputs.pkg_name }}}"
        url="${url/\{package_version\}/${{ steps.pkg_info.outputs.pkg_version }}}"
        echo "download_url=$url" >> $GITHUB_OUTPUT
        
        if [[ -n "${{ matrix.config.fallback_url_template }}" ]]; then
          fallback_url="${{ matrix.config.fallback_url_template }}"
          fallback_url="${fallback_url/\{r_version\}/${{ matrix.config.r }}}"
          fallback_url="${fallback_url/\{package_name\}/${{ steps.pkg_info.outputs.pkg_name }}}"
          fallback_url="${fallback_url/\{package_version\}/${{ steps.pkg_info.outputs.pkg_version }}}"
          echo "fallback_url=$fallback_url" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Download package
      id: downloadpkg
      run: |
        if [[ -n "${{ matrix.config.fallback_url_template }}" ]]; then
          if curl -L --output /dev/null --silent --head --fail "${{ steps.get_url.outputs.download_url }}"; then
            curl -L -O "${{ steps.get_url.outputs.download_url }}"
            echo "tarname=$(basename ${{ steps.get_url.outputs.download_url }})" >> $GITHUB_OUTPUT
          else
            echo "binary ${{ steps.get_url.outputs.download_url }} not found, using fallback ${{ steps.get_url.outputs.fallback_url }} instead"
            curl -L -O "${{ steps.get_url.outputs.fallback_url }}"
            echo "tarname=$(basename ${{ steps.get_url.outputs.fallback_url }})" >> $GITHUB_OUTPUT
          fi
        else
          curl -L -O "${{ steps.get_url.outputs.download_url }}"
          echo "tarname=$(basename ${{ steps.get_url.outputs.download_url }})" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: Install package
      run: |
        install.packages(c("devtools", "remotes"))
        d <- tempdir()
        untar("${{ steps.downloadpkg.outputs.tarname }}", exdir=d)
        description_file <- file.path(d, "${{ steps.pkg_info.outputs.pkg_name }}", "DESCRIPTION")
        desc <- read.dcf(description_file)
        depends <- unlist(strsplit(desc[1, "Depends"], ",\\s*"))
        imports <- unlist(strsplit(desc[1, "Imports"], ",\\s*"))
        suggests <- unlist(strsplit(desc[1, "Suggests"], ",\\s*"))
        all_dependencies <- unique(c(depends, imports, suggests))
        all_dependencies <- all_dependencies[all_dependencies != ""]
        install.packages(all_dependencies, repos=BiocManager::repositories())
        install.packages("${{ steps.downloadpkg.outputs.tarname }}", repos=NULL, type="source")
      shell: Rscript {0}

    - name: Run vignettes
      continue-on-error: true
      run: |
        Rscript -e 'install.packages("devtools"); devtools::build_vignettes(pkg = ".")' 2>&1 > /tmp/vignlog
        missing_packages=$(Rscript -e 'li <- tinytex::parse_packages("build_error.log"); cat(paste(shQuote(unlist(li)), collapse = ", "))')
        if [ -n "$missing_packages" ]; then
          echo "Missing packages: $missing_packages"
          Rscript -e "tinytex::tlmgr_install(c($missing_packages))"
        else
          echo "No missing LaTeX packages."
        fi
        Rscript -e 'devtools::build_vignettes(pkg = ".")'
      shell: bash

    - name: Upload binaries as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.config.os }}-binaries
        path: ${{ steps.downloadpkg.outputs.tarname }}

  create-release:
    needs: test-and-release
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Check if release exists
      id: check_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        version="${{ needs.test-and-release.outputs.pkg_version }}"
        if gh release view v$version &>/dev/null; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create release
      if: steps.check_release.outputs.exists == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        version="${{ needs.test-and-release.outputs.pkg_version }}"
        gh release create v$version \
          --title "${{ needs.test-and-release.outputs.pkg_name }} $version" \
          --notes "Release for R version ${{ github.event.inputs.r-version }}"

        for asset in ${{ needs.test-and-release.outputs.pkg_name }}*.*; do
          gh release upload v$version "$asset"
        done
      shell: bash
